{"version":3,"file":"1-timer.js","sources":["../src/js/1-timer.js"],"sourcesContent":["\n    import flatpickr from \"flatpickr\";\n    import iziToast from \"izitoast\";\n    import \"flatpickr/dist/flatpickr.min.css\";\n    import \"izitoast/dist/css/iziToast.min.css\";\n\n    \n    const datetimePicker = document.querySelector('#datetime-picker');\n    const startBtn = document.querySelector('[data-start]');\n    const daysValue = document.querySelector('[data-days]');\n    const hoursValue = document.querySelector('[data-hours]');\n    const minutesValue = document.querySelector('[data-minutes]');\n    const secondsValue = document.querySelector('[data-seconds]');\n\n    let userSelectedDate = null;\n    let timerInterval = null;\n\n    \n    const options = {\n      enableTime: true,\n      time_24hr: true,\n      defaultDate: new Date(),\n      minuteIncrement: 1,\n      onClose(selectedDates) {\n        userSelectedDate = selectedDates[0];\n        \n        if (userSelectedDate < new Date()) {\n          iziToast.error({\n            title: 'Error',\n            message: 'Please choose a date in the future',\n          });\n          startBtn.disabled = true;\n        } else {\n          startBtn.disabled = false;\n        }\n      },\n    };\n\n    const fp = flatpickr(datetimePicker, options);\n\n    \n    startBtn.addEventListener('click', () => {\n      startBtn.disabled = true;\n      datetimePicker.disabled = true;\n\n      timerInterval = setInterval(() => {\n        const now = new Date();\n        const diff = userSelectedDate - now;\n\n        if (diff <= 0) {\n          clearInterval(timerInterval);\n          datetimePicker.disabled = false;\n          return;\n        }\n\n        const { days, hours, minutes, seconds } = convertMs(diff);\n        \n        daysValue.textContent = addLeadingZero(days);\n        hoursValue.textContent = addLeadingZero(hours);\n        minutesValue.textContent = addLeadingZero(minutes);\n        secondsValue.textContent = addLeadingZero(seconds);\n      }, 1000);\n    });\n\n    \n    function convertMs(ms) {\n      const second = 1000;\n      const minute = second * 60;\n      const hour = minute * 60;\n      const day = hour * 24;\n\n      const days = Math.floor(ms / day);\n      const hours = Math.floor((ms % day) / hour);\n      const minutes = Math.floor(((ms % day) % hour) / minute);\n      const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n      return { days, hours, minutes, seconds };\n    }\n\n    function addLeadingZero(value) {\n      return String(value).padStart(2, '0');\n    }"],"names":["datetimePicker","startBtn","daysValue","hoursValue","minutesValue","secondsValue","userSelectedDate","timerInterval","options","selectedDates","iziToast","flatpickr","diff","days","hours","minutes","seconds","convertMs","addLeadingZero","ms","value"],"mappings":"+IAOI,MAAMA,EAAiB,SAAS,cAAc,kBAAkB,EAC1DC,EAAW,SAAS,cAAc,cAAc,EAChDC,EAAY,SAAS,cAAc,aAAa,EAChDC,EAAa,SAAS,cAAc,cAAc,EAClDC,EAAe,SAAS,cAAc,gBAAgB,EACtDC,EAAe,SAAS,cAAc,gBAAgB,EAE5D,IAAIC,EAAmB,KACnBC,EAAgB,KAGpB,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrBH,EAAmBG,EAAc,CAAC,EAE9BH,EAAmB,IAAI,MACzBI,EAAS,MAAM,CACb,MAAO,QACP,QAAS,oCACrB,CAAW,EACDT,EAAS,SAAW,IAEpBA,EAAS,SAAW,EAEvB,CACP,EAEeU,EAAUX,EAAgBQ,CAAO,EAG5CP,EAAS,iBAAiB,QAAS,IAAM,CACvCA,EAAS,SAAW,GACpBD,EAAe,SAAW,GAE1BO,EAAgB,YAAY,IAAM,CAEhC,MAAMK,EAAON,EADD,IAAI,KAGhB,GAAIM,GAAQ,EAAG,CACb,cAAcL,CAAa,EAC3BP,EAAe,SAAW,GAC1B,MACD,CAED,KAAM,CAAE,KAAAa,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYC,EAAUL,CAAI,EAExDV,EAAU,YAAcgB,EAAeL,CAAI,EAC3CV,EAAW,YAAce,EAAeJ,CAAK,EAC7CV,EAAa,YAAcc,EAAeH,CAAO,EACjDV,EAAa,YAAca,EAAeF,CAAO,CAClD,EAAE,GAAI,CACb,CAAK,EAGD,SAASC,EAAUE,EAAI,CAMrB,MAAMN,EAAO,KAAK,MAAMM,EAAK,KAAG,EAC1BL,EAAQ,KAAK,MAAOK,EAAK,MAAO,IAAI,EACpCJ,EAAU,KAAK,MAAQI,EAAK,MAAO,KAAQ,GAAM,EACjDH,EAAU,KAAK,MAASG,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAN,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACvC,CAED,SAASE,EAAeE,EAAO,CAC7B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CAC1C"}